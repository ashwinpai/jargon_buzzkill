name: Deploy BuzzKill to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create project structure
        run: |
          mkdir -p public src

      - name: Create package.json
        run: |
          cat > package.json << 'EOF'
          {
            "name": "buzzkill",
            "version": "1.0.0",
            "private": true,
            "homepage": ".",
            "dependencies": {
              "react": "^18.2.0",
              "react-dom": "^18.2.0",
              "react-scripts": "5.0.1",
              "lucide-react": "^0.263.1"
            },
            "devDependencies": {
              "tailwindcss": "^3.3.0",
              "postcss": "^8.4.31",
              "autoprefixer": "^10.4.16"
            },
            "scripts": {
              "start": "react-scripts start",
              "build": "react-scripts build"
            },
            "eslintConfig": {
              "extends": ["react-app"]
            },
            "browserslist": {
              "production": [">0.2%", "not dead", "not op_mini all"],
              "development": ["last 1 chrome version", "last 1 firefox version", "last 1 safari version"]
            }
          }
          EOF

      - name: Install dependencies
        run: npm install

      - name: Create Tailwind config
        run: npx tailwindcss init -p

      - name: Update tailwind.config.js
        run: |
          cat > tailwind.config.js << 'EOF'
          module.exports = {
            content: ["./src/**/*.{js,jsx,ts,tsx}", "./public/index.html"],
            theme: { extend: {} },
            plugins: []
          }
          EOF

      - name: Create public/index.html
        run: |
          cat > public/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="utf-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1" />
              <meta name="theme-color" content="#0f172a" />
              <meta name="description" content="BuzzKill - Daily corporate jargon puzzle game" />
              <meta property="og:title" content="BuzzKill - Decode Corporate BS" />
              <meta property="og:description" content="Daily corporate jargon puzzle game" />
              <title>BuzzKill - Decode Corporate BS</title>
            </head>
            <body>
              <noscript>You need to enable JavaScript to run this app.</noscript>
              <div id="root"></div>
            </body>
          </html>
          EOF

      - name: Create src/index.css
        run: |
          cat > src/index.css << 'EOF'
          @tailwind base;
          @tailwind components;
          @tailwind utilities;

          * {
            box-sizing: border-box;
          }

          body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
              'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }

          #root {
            min-height: 100vh;
          }
          EOF

      - name: Create src/index.js
        run: |
          cat > src/index.js << 'EOF'
          import React from 'react';
          import ReactDOM from 'react-dom/client';
          import './index.css';
          import App from './App';

          const root = ReactDOM.createRoot(document.getElementById('root'));
          root.render(
            <React.StrictMode>
              <App />
            </React.StrictMode>
          );
          EOF

      - name: Create src/App.js
        run: |
          cat > src/App.js << 'APPEOF'
          import React, { useState, useEffect } from 'react';
          import { AlertCircle, Share2, Zap, RotateCcw, Trophy } from 'lucide-react';

          const JARGON_DATABASE = {
            monday: [
              { phrase: "CIRCLE BACK", translation: "I'm ignoring this forever", usage: "When someone asks you to do something you have no intention of doing", danger: 3, category: "Meeting Jargon" },
              { phrase: "MOVE THE NEEDLE", translation: "Make literally any impact", usage: "When your boss wants to sound strategic about basic improvements", danger: 4, category: "Executive Speech" },
              { phrase: "BOIL THE OCEAN", translation: "Attempting the impossible", usage: "When someone's project scope is ridiculously large", danger: 4, category: "Project Management" },
              { phrase: "LOW HANGING FRUIT", translation: "The easy stuff we should've done months ago", usage: "When pretending obvious tasks are strategic wins", danger: 2, category: "Strategy Jargon" }
            ],
            tuesday: [
              { phrase: "TOUCH BASE", translation: "Pointless check-in meeting", usage: "When you need to justify your calendar", danger: 3, category: "Meeting Jargon" },
              { phrase: "SYNERGY", translation: "We're forcing teams to work together", usage: "During mergers or when justifying layoffs", danger: 5, category: "Executive Speech" },
              { phrase: "BANDWIDTH", translation: "Time or energy to do work", usage: "When saying no without saying no", danger: 2, category: "Resource Management" }
            ],
            wednesday: [
              { phrase: "PIVOT", translation: "Our strategy failed, trying something else", usage: "When pretending failure is innovation", danger: 4, category: "Strategy Jargon" },
              { phrase: "DEEP DIVE", translation: "Actually look at the details", usage: "When someone finally wants to understand something", danger: 2, category: "Analysis Jargon" },
              { phrase: "TABLE THIS", translation: "Never speak of this again", usage: "When killing ideas politely", danger: 3, category: "Meeting Jargon" }
            ],
            thursday: [
              { phrase: "PING ME", translation: "Send me a message", usage: "By people who think they're in The Matrix", danger: 1, category: "Communication" },
              { phrase: "LEVERAGE", translation: "Use", usage: "When 'use' sounds too simple", danger: 3, category: "Action Verbs" },
              { phrase: "PARKING LOT", translation: "Idea graveyard", usage: "For topics we're pretending we'll discuss later", danger: 4, category: "Meeting Jargon" }
            ],
            friday: [
              { phrase: "REACH OUT", translation: "Contact someone", usage: "By people allergic to the word 'email'", danger: 1, category: "Communication" },
              { phrase: "LOOP IN", translation: "Add to email chain", usage: "When spreading blame or credit", danger: 2, category: "Communication" },
              { phrase: "ALIGN", translation: "Agree", usage: "When making agreement sound harder than it is", danger: 2, category: "Collaboration" }
            ]
          };

          const DIFFICULTY_CONFIG = {
            monday: { tries: 8, hint: "Nightmare Mode - No help. Good luck.", category: false, firstLetter: false, vowels: false },
            tuesday: { tries: 7, hint: "Category revealed", category: true, firstLetter: false, vowels: false },
            wednesday: { tries: 6, hint: "First letters shown", category: true, firstLetter: true, vowels: false },
            thursday: { tries: 5, hint: "Vowels revealed", category: true, firstLetter: false, vowels: true },
            friday: { tries: 4, hint: "Maximum hints - Victory lap!", category: true, firstLetter: true, vowels: true }
          };

          const JARGON_TEMPLATES = {
            verbs: ["operationalize", "leverage", "sunset", "ideate", "monetize", "synergize", "strategize", "optimize"],
            objects: ["our bandwidth", "the synergy", "this stakeholder", "the paradigm", "these verticals", "the ecosystem"],
            modifiers: ["going forward", "at scale", "in the pipeline", "on my radar", "moving forward", "holistically"]
          };

          function App() {
            const [dayOfWeek, setDayOfWeek] = useState('monday');
            const [currentJargon, setCurrentJargon] = useState(null);
            const [guess, setGuess] = useState('');
            const [guesses, setGuesses] = useState([]);
            const [gameState, setGameState] = useState('playing');
            const [showGenerator, setShowGenerator] = useState(false);
            const [generatedJargon, setGeneratedJargon] = useState('');
            const [stats, setStats] = useState({ gamesPlayed: 0, gamesWon: 0, currentStreak: 0 });

            useEffect(() => {
              const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
              const today = new Date().getDay();
              let gameDay = days[today];
              if (gameDay === 'sunday' || gameDay === 'saturday') gameDay = 'monday';
              setDayOfWeek(gameDay);
              const jargonList = JARGON_DATABASE[gameDay];
              setCurrentJargon(jargonList[Math.floor(Math.random() * jargonList.length)]);
            }, []);

            const config = DIFFICULTY_CONFIG[dayOfWeek];

            const getMaskedPhrase = () => {
              if (!currentJargon) return '';
              return currentJargon.phrase.split(' ').map(word => {
                return word.split('').map((letter, idx) => {
                  if (config.vowels && 'AEIOU'.includes(letter)) return letter;
                  if (config.firstLetter && (idx === 0 || idx === word.length - 1)) return letter;
                  return '_';
                }).join('');
              }).join('   ');
            };

            const getLetterState = (letter, index) => {
              if (!currentJargon) return 'gray';
              const target = currentJargon.phrase.replace(/\s/g, '');
              if (target[index] === letter) return 'green';
              if (target.includes(letter)) return 'yellow';
              return 'gray';
            };

            const handleGuess = () => {
              if (!currentJargon || gameState !== 'playing') return;
              const cleanGuess = guess.toUpperCase().trim();
              if (cleanGuess.length === 0) return;
              const newGuesses = [...guesses, cleanGuess];
              setGuesses(newGuesses);
              setGuess('');
              if (cleanGuess === currentJargon.phrase) {
                setGameState('won');
                setStats(prev => ({ gamesPlayed: prev.gamesPlayed + 1, gamesWon: prev.gamesWon + 1, currentStreak: prev.currentStreak + 1 }));
              } else if (newGuesses.length >= config.tries) {
                setGameState('lost');
                setStats(prev => ({ gamesPlayed: prev.gamesPlayed + 1, gamesWon: prev.gamesWon, currentStreak: 0 }));
              }
            };

            const generateJargon = () => {
              const verb = JARGON_TEMPLATES.verbs[Math.floor(Math.random() * JARGON_TEMPLATES.verbs.length)];
              const object = JARGON_TEMPLATES.objects[Math.floor(Math.random() * JARGON_TEMPLATES.objects.length)];
              const modifier = JARGON_TEMPLATES.modifiers[Math.floor(Math.random() * JARGON_TEMPLATES.modifiers.length)];
              setGeneratedJargon("Let's " + verb + " " + object + " " + modifier);
            };

            const shareResults = () => {
              const emojis = guesses.map(g => {
                const guessClean = g.replace(/\s/g, '');
                let result = '';
                for (let i = 0; i < guessClean.length; i++) {
                  const state = getLetterState(guessClean[i], i);
                  result += state === 'green' ? '🟩' : state === 'yellow' ? '🟨' : '⬜';
                }
                return result;
              }).join('\n');
              const dayName = dayOfWeek.charAt(0).toUpperCase() + dayOfWeek.slice(1);
              const text = "BuzzKill " + dayName + " " + guesses.length + "/" + config.tries + " 💼\n" + emojis;
              navigator.clipboard.writeText(text).then(() => alert('Copied to clipboard!')).catch(() => alert('Unable to copy'));
            };

            const resetGame = () => {
              const jargonList = JARGON_DATABASE[dayOfWeek];
              setCurrentJargon(jargonList[Math.floor(Math.random() * jargonList.length)]);
              setGuesses([]);
              setGuess('');
              setGameState('playing');
            };

            if (!currentJargon) {
              return (
                <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 flex items-center justify-center text-white">
                  <div className="text-center">
                    <div className="w-12 h-12 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
                    <p className="text-slate-400">Loading your daily dose of corporate BS...</p>
                  </div>
                </div>
              );
            }

            return (
              <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 text-white p-4">
                <div className="max-w-2xl mx-auto">
                  <div className="text-center mb-8">
                    <h1 className="text-5xl font-bold mb-2 bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent">BuzzKill</h1>
                    <p className="text-slate-400 mb-4">Decode the corporate BS</p>
                    <div className="flex justify-center gap-6 mb-4 text-sm">
                      <div className="flex items-center gap-2">
                        <Trophy className="w-4 h-4 text-yellow-400" />
                        <span className="text-slate-400">Played: <span className="text-white font-bold">{stats.gamesPlayed}</span></span>
                      </div>
                      <div className="text-slate-400">Win Rate: <span className="text-green-400 font-bold">{stats.gamesPlayed > 0 ? Math.round((stats.gamesWon / stats.gamesPlayed) * 100) : 0}%</span></div>
                      <div className="text-slate-400">Streak: <span className="text-orange-400 font-bold">{stats.currentStreak} 🔥</span></div>
                    </div>
                    <div className="inline-block bg-slate-800 px-6 py-2 rounded-full">
                      <span className="text-yellow-400 font-bold capitalize">{dayOfWeek}</span>
                      <span className="text-slate-400 ml-2">• {config.hint}</span>
                    </div>
                  </div>
                  <div className="flex gap-2 mb-6 bg-slate-800 p-1 rounded-lg">
                    <button onClick={() => setShowGenerator(false)} className={"flex-1 py-2 px-4 rounded-md transition-colors " + (!showGenerator ? 'bg-slate-700 text-white' : 'text-slate-400 hover:text-white')}>Daily Challenge</button>
                    <button onClick={() => setShowGenerator(true)} className={"flex-1 py-2 px-4 rounded-md transition-colors " + (showGenerator ? 'bg-slate-700 text-white' : 'text-slate-400 hover:text-white')}><Zap className="inline w-4 h-4 mr-1" />Jargon Generator</button>
                  </div>
                  {!showGenerator ? (
                    <>
                      <div className="bg-slate-800 rounded-lg p-6 mb-6">
                        <div className="text-center mb-6">
                          <div className="text-3xl font-mono tracking-widest text-yellow-400 mb-4">{getMaskedPhrase()}</div>
                          {config.category && <div className="text-sm text-slate-400">Category: <span className="text-yellow-400">{currentJargon.category}</span></div>}
                        </div>
                        <div className="space-y-2 mb-6 min-h-[200px]">
                          {guesses.map((g, idx) => (
                            <div key={idx} className="flex gap-1 justify-center flex-wrap">
                              {g.split('').map((letter, i) => {
                                if (letter === ' ') return <div key={i} className="w-2"></div>;
                                const position = g.slice(0, i).replace(/\s/g, '').length;
                                const state = getLetterState(letter, position);
                                return <div key={i} className={"w-10 h-10 flex items-center justify-center font-bold rounded " + (state === 'green' ? 'bg-green-600' : state === 'yellow' ? 'bg-yellow-600' : 'bg-slate-600')}>{letter}</div>;
                              })}
                            </div>
                          ))}
                        </div>
                        {gameState === 'playing' && (
                          <div className="space-y-4">
                            <div className="flex gap-2">
                              <input type="text" value={guess} onChange={(e) => setGuess(e.target.value.toUpperCase())} onKeyDown={(e) => e.key === 'Enter' && handleGuess()} placeholder="Type your guess..." className="flex-1 bg-slate-700 text-white px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-400" maxLength={50} autoFocus />
                              <button onClick={handleGuess} className="bg-yellow-500 hover:bg-yellow-600 text-slate-900 px-6 py-3 rounded-lg font-bold transition-colors">Guess</button>
                            </div>
                            <div className="text-center text-slate-400 text-sm">{guesses.length}/{config.tries} tries used</div>
                          </div>
                        )}
                      </div>
                      {gameState !== 'playing' && (
                        <div className="bg-gradient-to-br from-slate-700 to-slate-800 rounded-lg p-6 mb-6 border-2 border-yellow-400">
                          <div className="text-center mb-4">
                            <h2 className="text-2xl font-bold text-yellow-400 mb-2">{gameState === 'won' ? '🎯 Decoded!' : '💼 The Answer'}</h2>
                            <div className="text-3xl font-bold mb-4">{currentJargon.phrase}</div>
                          </div>
                          <div className="space-y-3 text-left bg-slate-900 rounded-lg p-4">
                            <div><span className="text-slate-400 text-sm">Translation:</span><p className="text-white font-medium">{currentJargon.translation}</p></div>
                            <div><span className="text-slate-400 text-sm">Usage:</span><p className="text-white text-sm">{currentJargon.usage}</p></div>
                            <div><span className="text-slate-400 text-sm">Danger Level:</span><p className="text-red-400 text-lg">{'🚩'.repeat(currentJargon.danger)}</p></div>
                          </div>
                          <div className="flex gap-2 mt-6">
                            <button onClick={shareResults} className="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-3 rounded-lg flex items-center justify-center gap-2 transition-colors font-medium"><Share2 className="w-4 h-4" />Share</button>
                            <button onClick={resetGame} className="flex-1 bg-slate-600 hover:bg-slate-700 text-white px-4 py-3 rounded-lg flex items-center justify-center gap-2 transition-colors font-medium"><RotateCcw className="w-4 h-4" />New Game</button>
                          </div>
                        </div>
                      )}
                    </>
                  ) : (
                    <div className="bg-slate-800 rounded-lg p-6">
                      <div className="text-center mb-6">
                        <AlertCircle className="w-12 h-12 text-yellow-400 mx-auto mb-3" />
                        <h2 className="text-2xl font-bold mb-2">Peak Corporate Generator</h2>
                        <p className="text-slate-400">Need to sound important in your next email?</p>
                      </div>
                      {generatedJargon && (
                        <div className="bg-slate-700 rounded-lg p-6 mb-6 text-center">
                          <p className="text-xl text-yellow-400 font-medium mb-4">"{generatedJargon}"</p>
                          <button onClick={() => { navigator.clipboard.writeText(generatedJargon).then(() => alert('Copied! Use at your own risk ⚠️')).catch(() => alert('Unable to copy')); }} className="text-sm text-slate-400 hover:text-white transition-colors">📋 Copy to clipboard</button>
                        </div>
                      )}
                      <button onClick={generateJargon} className="w-full bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-slate-900 font-bold px-6 py-4 rounded-lg transition-all transform hover:scale-105"><Zap className="inline w-5 h-5 mr-2" />Generate Peak Corporate</button>
                      <p className="text-center text-xs text-slate-500 mt-4">⚠️ Use at your own risk. May cause eye-rolling.</p>
                    </div>
                  )}
                  <div className="text-center text-slate-500 text-xs mt-8">
                    <p>BuzzKill • Decode corporate jargon daily</p>
                  </div>
                </div>
              </div>
            );
          }

          export default App;
          APPEOF

      - name: Build
        run: CI=false npm run build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './build'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
